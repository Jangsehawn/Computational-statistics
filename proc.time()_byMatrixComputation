#### proc.time()

t1<-proc.time()
t2<-proc.time()

t2-t1

##### (AB)c!=A(Bc)
A<-matrix(rnorm(1000000),1000,1000)
B<-matrix(rnorm(1000000),1000,1000)
c<-rnorm(1000)

t1<-proc.time()
rr<-(A%*%B)%*%c
t2<-proc.time()
t2-t1

rr[1:10]

t1<-proc.time()
rr<-A%*%(B%*%c)
t2<-proc.time()
t2-t1

rr[1:10]

##### Problem dimension affects the computing time !
A<-matrix(rnorm(10000),100,100)
t1<-proc.time()
B<-solve(A)
t2<-proc.time()
t2-t1

A<-matrix(rnorm(1000000),1000,1000)
t1<-proc.time()
B<-solve(A)
t2<-proc.time()
t2-t1

###### For a diagonal matrix
dd<-seq(1:1000)
A<-diag(dd)
t1<-proc.time()
B<-solve(A)
t2<-proc.time()
t2-t1

B[1:10,1:10]

t1<-proc.time()
B<-diag(1/dd)
t2<-proc.time()
t2-t1

B[1:10,1:10]



###### backward substitution
## upper triangular matrix 'r'
R <- rbind(c(1,2,3),
           c(0,1,1),
           c(0,0,2))
b<-c(8,4,2)
y <- backsolve(R, b) ### solving Rx=b
## check
R %*% y 

###### standard method vs backward substitution
A<-matrix(rnorm(100000),1000,1000)+100*diag(1000)
b<-rnorm(1000)

for (i in 2:1000){
  A[i,1:(i-1)]<-0
}
A[1:10,1:10]


t1<-proc.time()
y<-solve(A)%*%b
t2<-proc.time()
t2-t1

y[1:10]


t1<-proc.time()
y<-backsolve(A,b)
t2<-proc.time()
t2-t1

y[1:10]
